// Generated by CoffeeScript 1.6.3
(function() {
  window.portfolio = angular.module('portfolio', ['ngRoute', 'ngTouch']).run(function(monitorScroll) {
    return console.log('');
  }).config(function($routeProvider) {
    return $routeProvider.when('/post/:postId', {
      templateUrl: 'partials/post.html',
      controller: 'Post'
    }).otherwise({
      templateUrl: '/partials/home.html'
    });
  }).controller('Tags', function($scope, tagBank) {
    return console.log('');
  }).controller('Projects', function($scope, $http) {
    this.stuff = 'this is accessible stuff';
    $http.get('json/projects.json').success(function(projects) {
      return $scope.projects = projects;
    });
    $scope.selectProject = function(project) {
      return $scope.selectedProject = project;
    };
    $scope.closeImageModal = function() {
      return $scope.selectedProject = null;
    };
    $scope.selectVideo = function(video) {
      return $scope.selectedVideo = video;
    };
    return $scope.closeVideoModal = function() {
      return $scope.selectedVideo = null;
    };
  }).controller('Blog', function($scope, $http) {
    return $http.get('json/blog.json').success(function(posts) {
      return $scope.posts = posts;
    });
  }).controller('Post', function($scope, $routeParams, $http) {
    $scope.postId = $routeParams.postId;
    return $http.get('json/blog.json').success(function(posts) {
      return $scope.post = posts[$routeParams.postId];
    });
  }).factory('monitorScroll', function() {
    var $w;
    $w = $(window);
    return {
      scroll: function(cb) {
        return $w.scroll(function() {
          if (_.isFunction(cb)) {
            return cb($w.scrollTop());
          }
        });
      }
    };
  }).directive('onScroll', function(monitorScroll) {
    return {
      restrict: 'A',
      scope: {},
      link: function(scope, elem, attrs, ngModel) {
        return monitorScroll.scroll(function(vScroll) {
          var factor;
          factor = attrs.factor || 1;
          return elem.css(attrs.onScroll, vScroll * factor);
        });
      }
    };
  }).directive('imageSlider', function() {
    return {
      templateUrl: 'partials/slider-images.html',
      scope: {
        images: '=imageSlider',
        clickImage: '&',
        currentImage: '=',
        imageDir: '@'
      },
      controller: function($scope) {
        var getCurrentImageIndex;
        $scope.currentImage = $scope.images[0];
        getCurrentImageIndex = function() {
          return $scope.images.indexOf($scope.currentImage);
        };
        $scope.nextImage = function($event) {
          if (!$scope.nextDisabled) {
            return $scope.currentImage = $scope.images[getCurrentImageIndex() + 1];
          }
        };
        $scope.prevImage = function($event) {
          if (!$scope.prevDisabled) {
            return $scope.currentImage = $scope.images[getCurrentImageIndex() - 1];
          }
        };
        return $scope.$watch('currentImage', function(img) {
          $scope.nextDisabled = $scope.prevDisabled = false;
          if (getCurrentImageIndex() === $scope.images.length - 1) {
            $scope.nextDisabled = true;
          }
          if (getCurrentImageIndex() === 0) {
            return $scope.prevDisabled = true;
          }
        });
      }
    };
  }).directive('imageModal', function() {
    return {
      restrict: 'A',
      templateUrl: 'partials/image-modal.html',
      scope: {
        images: '=imageModal',
        currentImage: '=',
        imageDir: '@'
      },
      controller: function($scope) {
        return $scope.clickImage = function(currentImage) {
          var nextIndex;
          nextIndex = 1 + $scope.images.indexOf(currentImage);
          if (nextIndex === $scope.images.length) {
            nextIndex = 0;
          }
          return $scope.currentImage = $scope.images[nextIndex];
        };
      }
    };
  }).directive('videoModal', function() {
    return {
      restrict: 'A',
      templateUrl: 'partials/video-modal.html',
      scope: {
        video: '=videoModal',
        videoDir: '@'
      },
      controller: function($scope, $sce) {
        return $scope.$watchCollection('[videoDir, video]', function(newValues) {
          return $scope.trustedVideoUrl = $sce.trustAsResourceUrl(newValues[0] + newValues[1]);
        });
      }
    };
  }).directive('tags', function(tagBank) {
    return {
      restrict: 'A',
      scope: {
        tags: '='
      },
      templateUrl: 'partials/tags.html',
      controller: function($scope) {
        if (!$scope.tags) {
          $scope.tagList = tagBank.savedTags;
        } else {
          $scope.tagList = _.map($scope.tags, function(tag) {
            var foundTag;
            foundTag = tagBank.find(tag);
            if (!foundTag) {
              foundTag = tagBank.add(tag);
            }
            return foundTag;
          });
        }
        return $scope.activateTag = function(tag) {
          if (!tag.selected) {
            return tag.selected = true;
          }
          return tag.selected = false;
        };
      }
    };
  }).directive('code', function() {
    return {
      restrict: 'E',
      compile: function(e) {
        return hljs.highlightBlock(e[0]);
      }
    };
  }).factory('tagBank', function() {
    var savedTags;
    savedTags = [];
    return {
      find: function(tag) {
        var foundTag;
        foundTag = void 0;
        _.each(this.savedTags, function(t) {
          if (t.tag === tag) {
            return foundTag = t;
          }
        });
        return foundTag;
      },
      add: function(tag) {
        var newTag;
        newTag = {
          tag: tag
        };
        this.savedTags.push(newTag);
        return newTag;
      },
      savedTags: []
    };
  });

}).call(this);
